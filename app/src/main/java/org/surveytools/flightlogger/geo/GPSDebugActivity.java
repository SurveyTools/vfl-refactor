package org.surveytools.flightlogger.geo;

import java.sql.Date;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;

import org.surveytools.flightlogger.FileBrowser;
import org.surveytools.flightlogger.geo.data.TransectStatus;
import org.surveytools.flightlogger.util.SystemUiHider;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.Activity;
import android.app.PendingIntent;
import android.content.ComponentName;
import android.content.Intent;
import android.content.ServiceConnection;
import android.location.Location;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.WindowManager;
import android.widget.TextView;

import org.surveytools.flightlogger.R;

public class GPSDebugActivity extends Activity implements TransectUpdateListener {

	// used for identifying Activities that return results
	static final int LOAD_GPX_FILE = 10001;

	// refs to our ui controls, so we don't do a resource lookup each time
	TextView mLatTV, mLonTV, mAltTV, mSpeedTV, mDistanceTV, mCrossTrackTV;

	// Autohide stuff, generated by the Eclipse project. We may need to
	// extract it, it seems pretty messy to me
	private static final boolean AUTO_HIDE = true;
	private static final int AUTO_HIDE_DELAY_MILLIS = 3000;
	private static final boolean TOGGLE_ON_CLICK = true;
	private static final int HIDER_FLAGS = SystemUiHider.FLAG_HIDE_NAVIGATION;
	private SystemUiHider mSystemUiHider;

	PendingIntent mPermissionIntent;
	
	private NavigationService mNavigationService;

	private ServiceConnection mNavigationConnection = new ServiceConnection() {

		@Override
		public void onServiceConnected(ComponentName className, IBinder service) {
			NavigationService.LocalBinder binder = (NavigationService.LocalBinder) service;
			mNavigationService = (NavigationService) binder.getService();
			mNavigationService.registerListener(GPSDebugActivity.this);
		}

		@Override
		public void onServiceDisconnected(ComponentName arg0) {
			mNavigationService.unregisterListener(GPSDebugActivity.this);
		}
	};

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		setContentView(R.layout.activity_gps_debug);
		
		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

		final View controlsView = findViewById(R.id.fullscreen_content_controls);
		final View contentView = findViewById(R.id.fullscreen_content);

		bindUIControls();
		
		initNavService();

		// Autohide the parent controls, to maximize monitor space when running
		mSystemUiHider = SystemUiHider.getInstance(this, contentView,
				HIDER_FLAGS);
		mSystemUiHider.setup();
		mSystemUiHider
				.setOnVisibilityChangeListener(new SystemUiHider.OnVisibilityChangeListener() {
					// Cached values.
					int mControlsHeight;
					int mShortAnimTime;

					@Override
					@TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
					public void onVisibilityChange(boolean visible) {
						if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
							// If the ViewPropertyAnimator API is available
							// (Honeycomb MR2 and later), use it to animate the
							// in-layout UI controls at the bottom of the
							// screen.
							if (mControlsHeight == 0) {
								mControlsHeight = controlsView.getHeight();
							}
							if (mShortAnimTime == 0) {
								mShortAnimTime = getResources().getInteger(
										android.R.integer.config_shortAnimTime);
							}
							controlsView
									.animate()
									.translationY(visible ? 0 : mControlsHeight)
									.setDuration(mShortAnimTime);
						} else {
							// If the ViewPropertyAnimator APIs aren't
							// available, simply show or hide the in-layout UI
							// controls.
							controlsView.setVisibility(visible ? View.VISIBLE
									: View.GONE);
						}

						if (visible && AUTO_HIDE) {
							// Schedule a hide().
							delayedHide(AUTO_HIDE_DELAY_MILLIS);
						}
					}
				});

		// Set up the user interaction to manually show or hide the system UI.
		contentView.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View view) {
				if (TOGGLE_ON_CLICK) {
					mSystemUiHider.toggle();
				} else {
					mSystemUiHider.show();
				}
			}
		});

	}
	
	public void loadGPX(View view) {
		// load gpx
		Intent intent = new Intent(this, FileBrowser.class);
		this.startActivityForResult(intent, LOAD_GPX_FILE);
	}

	private void bindUIControls() {
		mLatTV = (TextView) findViewById(R.id.gpsVal1);
		mLonTV = (TextView) findViewById(R.id.gpsVal2);
		mAltTV = (TextView) findViewById(R.id.gpsVal3);
		mSpeedTV = (TextView) findViewById(R.id.gpsVal4);
		mCrossTrackTV = (TextView) findViewById(R.id.gpsVal5);
		mDistanceTV = (TextView) findViewById(R.id.gpsVal6);
	}

	@Override
	public void onRouteUpdate(final TransectStatus status) {
		runOnUiThread(new Runnable() {
			public void run() {
				mLatTV.setText(Location.convert(status.mCurrGpsLat, Location.FORMAT_DEGREES));
				mLonTV.setText(Location.convert(status.mCurrGpsLon,Location.FORMAT_DEGREES));
				mAltTV.setText(formatAltitude(status.mCurrGpsAlt));
				mSpeedTV.setText(String.valueOf(Float.toString(status.mGroundSpeed)));
				mDistanceTV.setText(String.valueOf(Double.toString(status.mDistanceToEnd)));
				mCrossTrackTV.setText(Double.toString((status.mCrossTrackError)));
			}
		});
	}

	@SuppressLint("SimpleDateFormat")
	private String convertGPSTime(long gpsTime) {
		// TODO: see if SimpleDateFormat and Date are expensive
		Date date = new Date(gpsTime);
		SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss z");
		String text = sdf.format(date);
		return text;
	}

	private String formatAltitude(double altVal) {
		DecimalFormat df = new DecimalFormat("#.##");
		return df.format(altVal);
	}

	public void initNavService() {
		Intent intent2 = new Intent(this, NavigationService.class);
		this.bindService(intent2, mNavigationConnection, 0);
	}

	/**
	 * Hide status bars to maximize space
	 */
	View.OnTouchListener mDelayHideTouchListener = new View.OnTouchListener() {
		@Override
		public boolean onTouch(View view, MotionEvent motionEvent) {
			if (AUTO_HIDE) {
				delayedHide(AUTO_HIDE_DELAY_MILLIS);
			}
			return false;
		}
	};

	@Override
	protected void onPostCreate(Bundle savedInstanceState) {
		super.onPostCreate(savedInstanceState);
		// Trigger the initial hide() shortly after the activity has been
		// created, to briefly hint to the user that UI controls
		// are available.
		delayedHide(100);
	}

	Handler mHideHandler = new Handler();
	Runnable mHideRunnable = new Runnable() {
		@Override
		public void run() {
			mSystemUiHider.hide();
		}
	};

	private void delayedHide(int delayMillis) {
		mHideHandler.removeCallbacks(mHideRunnable);
		mHideHandler.postDelayed(mHideRunnable, delayMillis);
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
	}

	@Override
	public void onResume() {
		super.onResume();
	}

}
